@mixin renderUtility($selector, $property, $value, $valProps) {
  .#{$selector} {
    @if map-has-key($valProps, extend) {
      #{map-deep-get($valProps, extend, property)}: strunquote(map-deep-get($valProps, extend, value));
    }
    @each $thisProperty in $property {
      #{$thisProperty}: $value;
    }
  }
}

@mixin renderPseudoclasses($selector, $property, $value, $valProps){
  @each $pseudoKey, $pseudoValue in map-get($global_values, pseudoclasses){
    .#{$pseudoKey}-#{$selector}#{$pseudoValue} {
      @each $thisProperty in $property {
        #{$thisProperty}: $value;
      }
    }
  }
}

@mixin renderPlaceholder($selector, $property, $value, $valProps){
  .pl-#{$selector}::placeholder {
    @each $thisProperty in $property {
      #{$thisProperty}: $value;
    }
  }
}

@mixin renderMediaQueries($selector, $property, $value, $valProps){
  @each $mediaKey, $mediaValue in map-get($global_values, breakpoints){
    @media (min-width: #{nth($mediaValue, 1)}) {
      .#{$mediaKey}-#{$selector} {
        @if map-has-key($valProps, extend) {
          #{map-deep-get($valProps, extend, property)}: strunquote(map-deep-get($valProps, extend, value));
        }
        @each $thisProperty in $property {
          #{$thisProperty}: $value;
        }
      }
    }
  }
}

@mixin renderUtilitiesIn($utilities){

  // loop through the $utilities

  @each $utilityName, $utility in $utilities {

    // Only do this if the the untility is meant to output

    @if map-get($utility, output){
      // set intital variants
      // $propertyDefault is a single value for all these utilities

      $baseProps: null;
      $modifier: null;
      $selector: null;
      $propertyDefault: map-get($utility, property);
      $property: null;
      $value: null;
      $ourModifiers: ();
      $b: null;
      $v: null;
      $mv: null;
      $valProps: ();

      //    If there's a base, use baseToMap() to convert it into a MAP:
      //    $baseProps: (
      //      slug: STRING,
      //      isReadable: BOOL,
      //    )

      @if map-get($utility, base) != null {
        $baseProps: baseToMap(map-get($utility, base));

        // And set $b (used in the selector constructor, below) to baseProps.slug.

        $b: map-get($baseProps, slug);

        // Otherwise, assign it null props.

      } @else {
        $baseProps: (
          slug: null,
        );
      }

      // Each utility rule takes a value, so let's start here and begin building.
      // Values are held in a MAP, where each individual value has the keypair
      // KEY   :  VALUE
      // [slug]:  [value], [isReadable]*

      // -------- For each value in utility.values ----------

      @each $valKey, $valValue in map-get($utility, values) {

        // If $valValue is already a MAP...

        @if type-of($valValue) == 'map' {

          // set $valProps = $valValue

          $valProps: $valValue;

        // If it _isn't_ a MAP...

        } @else {

          // ...use toMap() to convert the value keypair into a MAP:
          //    $valProps: (
          //      slug: STRING,
          //      [isReadable: BOOL,]*
          //      content: LIST,
          //      [extends: STRING,]*
          //    )

          // We'll keep the $valProps MAP around,
          // as we'll need it to build both the rule's value and its selector.

          $valProps: toMap($valKey, $valValue);
        }

        // In fact, let's set our rule's value now.

        $value: strunquote(nth(map-get($valProps, content), 1));

        // Add any appended values...

        @if map-get($utility, valueAppend) {
          $value: $value + map-get($utility, valueAppend);
        }

        // ...or prepended values.

        @if map-get($utility, valuePrepend) {
          $value: map-get($utility, valuePrepend) + $value;
        }

        // Then unquote the string.

        $value: strunquote($value);

        // And we'll set the $v as valProps.slug for use in
        // constructing the selector.

        $v: map-get($valProps, slug);

        // -------- Start of Modifiers ----------

        // Now we'll check for modifiers and loop through them
        // to get the props we need to build our rule.

        // Modifiers are held in a MAP,
        // where each individual modifer has the keypair
        // KEY   :  VALUE
        // [slug]:  [value], [isReadable]*

        // So, check for modifiers.

        @if map-get($utility, modifiers) != null {

          // If there is one, capture it as $ourModifiers.

          $ourModifiers: map-get($utility, modifiers);
        } @else {

          // If there isn't one, build a dummy so we can keep
          // all our build in the same loop.

          $ourModifiers: (
            slug: null,
          );
        }

        // OK! C'mon, let's loop!
        // https://www.youtube.com/watch?v=X9i2i07wPUw

        // -------- For each modifier in $ourModifiers ----------

        @each $modKey, $modVal in $ourModifiers {

          // Use toMap() to convert the modifier keypair into a MAP:
          //    $modProps: (
          //      slug: STRING,
          //      isReadable: BOOL,
          //      content: LIST,
          //    )

          // Just as we did before with the value keypair.

          $modProps: toMap($modKey, $modVal);

          // -------- if the modifier is null ----------

          @if map-get($modProps, content) == null {

            // If modProps.values is null, there's no modifier property
            // and we can set our rule's $property now
            // since $property is simply $propertyDefault.

            $property: $propertyDefault;

            // We can also build the $selector if modProps.slug is null!
            // First, we can test to see if selector $b is null

            @if $b == null {

              // If it _is_ null, the rule's selector is $v.

              $selector: $v;

            // if the value is noValue ('')

            } @elseif map-get($valProps, slug) == '' {

              // selector is a simple join

              $selector: $b + $v;

            // Otherwise, if baseProps.isReadable, or valProps.isReadable

            } @elseif map-has-key($baseProps, isReadable) or
                      map-has-key($valProps, isReadable) {

              // selector is joined with a '-'

              $selector: $b + '-' + $v;
            } @else {

              // otherwise, it gets a simple join.

              $selector: $b + $v;

              // Nice! We just took care of the non-modifier cases!

            }

          // '-' “oh hey.”

          //                     '-' “hey.”

          // '-' “hey.”

          // OK, cool.
          // So what if there _is_ a modifier object?

          // -------- if the modifier is NOT null ----------

          } @else {

            // If there are modifiers, $property is a concat of $propertyDefault
            // with _each_ of the values in $modProps.content
            // There's a function for this... multiCat()!!
            // (=^･ｪ･^=))ﾉ彡☆
            // (^._.^)ﾉ☆( _ _).oO
            // (=චᆽච=)

            $property: multiCat($propertyDefault, map-get($modProps, content));

            // Now we go through to finish setting the $selector.
            // Check to see if either mod.isReadable or
            // val.isReadable

            @if map-has-key($modProps, isReadable) or
                map-has-key($valProps, isReadable) {

              // If so, join with a '-' into selector $mv.

              $mv: map-get($modProps, slug) + '-' + map-get($valProps, slug);
            } @else {

              // If not, just join into selector $mv.

              $mv: map-get($modProps, slug) + map-get($valProps, slug);
            }

            // Once we have $mv, test for $b
            // and build the selector as before.

            @if $b == null {
              $selector: $mv;
            } @elseif map-get($baseProps, isReadable) or
                      map-get($modProps, isReadable) {
              $selector: $b + '-' + $mv;
            } @else {
              $selector: $b + $mv;
            }
          } // finished setting modifier vars

          // Hey. Did we just finish $selector?
          // And do we also have $property and $value?
          // We do?!?!?! We do!

          // FINALLY, "BUILD THE RULE, MAX!"
          // https://www.youtube.com/watch?v=R3Igz5SfBCE

          @include renderUtility($selector, $property, $value, $valProps);

          // Add the pseudoclass variants, if applicable

          @if map-get($utility, pseudoclasses){
            @include renderPseudoclasses($selector, $property, $value, $valProps);
          }

          // Add the placeholder variant, if applicable

          @if map-get($utility, placeholder){
            @include renderPlaceholder($selector, $property, $value, $valProps);
          }

          // And add the responsive prefixes, if applicable

          @if map-get($utility, responsive){
            @include renderMediaQueries($selector, $property, $value, $valProps);
          } // ･ﾟ✧
        } // end the modifier loop
      } // end the value loop
    } // end the output conditional
  } // end the utility loop
  // (ﾉ◕ヮ◕)ﾉ*:･ﾟ✧
}
